def generate_key_matrix(keyword):
 
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
    keyword = ''.join(sorted(set(keyword), key=keyword.index)).replace('J', 'I')
    key_string = keyword + ''.join(filter(lambda x: x not in keyword, alphabet))
    
  
    key_matrix = [list(key_string[i:i+5]) for i in range(0, 25, 5)]
    return key_matrix

def find_position(matrix, char):
    for row in range(5):
        for col in range(5):
            if matrix[row][col] == char:
                return row, col
    return None

def prepare_text(plaintext, for_encryption=True):
    
    plaintext = plaintext.upper().replace('J', 'I')
   
    plaintext = ''.join(filter(str.isalpha, plaintext))
    
    prepared = ""
    i = 0
    while i < len(plaintext):
        char1 = plaintext[i]
        char2 = plaintext[i + 1] if i + 1 < len(plaintext) else 'X'
        if char1 == char2:
            prepared += char1 + 'X'
            i += 1
        else:
            prepared += char1 + char2
            i += 2
    if len(prepared) % 2 != 0:
        prepared += 'X'
    return prepared

def playfair_cipher(text, key_matrix, mode='encrypt'):
    shift = 1 if mode == 'encrypt' else -1
    text = prepare_text(text, for_encryption=(mode=='encrypt'))
    cipher_text = ""

    for i in range(0, len(text), 2):
        char1, char2 = text[i], text[i+1]
        pos1 = find_position(key_matrix, char1)
        pos2 = find_position(key_matrix, char2)

        if not pos1 or not pos2:
            raise ValueError(f"Character {char1} or {char2} not in key matrix")

        row1, col1 = pos1
        row2, col2 = pos2

        if row1 == row2:
            cipher_text += key_matrix[row1][(col1 + shift) % 5] + key_matrix[row2][(col2 + shift) % 5]
        elif col1 == col2:
            cipher_text += key_matrix[(row1 + shift) % 5][col1] + key_matrix[(row2 + shift) % 5][col2]
        else:
            cipher_text += key_matrix[row1][col2] + key_matrix[row2][col1]

    if mode == 'decrypt':
        cipher_text = remove_padding(cipher_text)
    
    return cipher_text

def remove_padding(text):
 
    result = ""
    i = 0
    while i < len(text):
        char1 = text[i]
        char2 = text[i + 1] if i + 1 < len(text) else ''
        if char1 != 'X' or (i > 0 and text[i - 1] != char1):
            result += char1
        if char2 != 'X' or (char1 != char2):
            result += char2
        i += 2
    return result.rstrip('X')

keyword = input("enter the keyword in capitals : ")
plaintext = input("enter the plain text in capitals : ")
key_matrix = generate_key_matrix(keyword.replace(" ", "").upper())

encrypted_text = playfair_cipher(plaintext, key_matrix, mode='encrypt')
print("Encrypted:", encrypted_text)

decrypted_text = playfair_cipher(encrypted_text, key_matrix, mode='decrypt')
print("Decrypted:",decrypted_text)
